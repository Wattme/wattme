"use strict"

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import {
  Text,
  View,
  ViewPropTypes,
  TouchableOpacity
} from 'react-native/index';

import {
  Svg,
  Path,
  Rect
} from "react-native-svg";

import styles from './VirtualKeyboard.style';

class VirtualKeyboard extends Component {

  static propTypes = {
    pressMode: PropTypes.oneOf(['string', 'char']),
    color: PropTypes.string,
    onPress: PropTypes.func.isRequired,
    backspaceImg: PropTypes.number,
    applyBackspaceTint: PropTypes.bool,
    decimal: PropTypes.bool,
    rowStyle: ViewPropTypes.style,
    cellStyle: ViewPropTypes.style
  }

  static defaultProps = {
    pressMode: 'string',
    color: 'gray',
    applyBackspaceTint: true,
    decimal: false,
  }

  constructor(props) {
    super(props);
    this.state = {
      text: '',
    };
  }

  render() {
    return (
      <View style={[this.props.style]}>
        {this.Row([1, 2, 3])}
        {this.Row([4, 5, 6])}
        {this.Row([7, 8, 9])}
        <View style={[styles.row, this.props.rowStyle]}>
          {this.Biometrics()}
          {this.Cell(0)}
          {this.Backspace()}
        </View>
      </View>
    );
  }

  Backspace() {
    return (
      <TouchableOpacity style={[styles.cell, this.props.cellStyle]} onPress={() => { this.onPress('back') }}>
        <Svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
          <Path fillRule="evenodd" clip-rule="evenodd" d="M24.4269 22.7042C24.33 22.7987 24.226 22.9023 24.0871 23.042C24.0871 23.042 21.7982 25.3324 21.7906 25.339C21.7195 25.4064 21.6605 25.464 21.5992 25.5249C21.571 25.553 21.546 25.5778 21.4926 25.6303C21.4467 25.6755 21.4254 25.6964 21.399 25.7228L19.3295 27.7946C19.2851 27.8407 19.247 27.8795 19.198 27.9287L19.1422 27.9848C19.079 28.0481 19.029 28.0996 18.9583 28.1733C18.7963 28.3332 18.6319 28.5141 18.4772 28.7037C18.3334 28.857 18.2173 29.0342 18.1342 29.2275L18.1123 29.2859C17.9626 29.7494 17.9626 30.2482 18.1123 30.7116L18.1352 30.7723C18.2189 30.965 18.3356 31.1416 18.48 31.2941C18.634 31.4835 18.7983 31.6644 18.9719 31.836C19.0084 31.8754 19.0622 31.9303 19.1341 32.0022C19.1838 32.0519 19.2051 32.0733 19.2317 32.1001C19.2661 32.1348 19.2958 32.1651 19.3234 32.1937L21.3984 34.2725C21.5012 34.3753 21.5472 34.421 21.6296 34.5013C21.6972 34.5682 21.7373 34.6072 21.8115 34.6756L24.0891 36.9565C24.2598 37.1273 24.3364 37.2035 24.4329 37.2983C24.5584 37.4239 24.6411 37.505 24.7703 37.6313C24.819 37.6826 24.8372 37.7015 24.8622 37.7247C25.1538 38.0177 25.5094 38.2767 25.8989 38.4754C26.2887 38.6717 26.702 38.8081 27.1286 38.8818C27.5283 38.9476 27.9271 38.9828 28.3269 38.9878C28.4964 38.9916 28.6665 38.9939 28.8346 38.9945L29.2348 38.9945H36.6805C36.835 38.9945 36.9882 38.9923 37.2006 38.9877C37.598 38.9829 38.0008 38.9475 38.3992 38.8821C38.8343 38.8069 39.2505 38.6692 39.6397 38.4726C40.0341 38.2732 40.394 38.0123 40.706 37.6997C41.0167 37.3878 41.2765 37.0301 41.4767 36.6388C41.6748 36.2444 41.812 35.8274 41.8858 35.3971C41.9518 34.9938 41.9869 34.5912 41.9917 34.1878C41.9947 34.0887 41.9961 34.0014 41.9984 33.8071L42 33.6828L42.0001 33.0697V26.2823L41.9989 26.1749C41.9976 26.0552 41.997 26.0029 41.9958 25.9358C41.9947 25.8728 41.9934 25.8151 41.9918 25.7595C41.9873 25.3716 41.9525 24.9726 41.888 24.578C41.8138 24.1459 41.6778 23.7325 41.4836 23.3456C41.2825 22.9525 41.0244 22.5975 40.7163 22.2885C40.4081 21.9781 40.051 21.7183 39.6595 21.5201C39.2732 21.3248 38.8603 21.188 38.434 21.1141C38.0325 21.0488 37.6336 21.014 37.2338 21.0087C37.0528 21.0043 36.8857 21.002 36.7251 21.002C36.563 21.0003 36.4289 21 36.1279 21H29.4324C29.1336 21 28.9986 21.0003 28.8292 21.002C28.6756 21.002 28.5091 21.0043 28.3181 21.0089C27.9259 21.014 27.5277 21.0488 27.1337 21.113C26.7003 21.1881 26.287 21.3247 25.9005 21.5196C25.5081 21.7195 25.1522 21.9788 24.8437 22.289C24.8294 22.3031 24.8189 22.3141 24.7316 22.4074C24.6232 22.5101 24.5236 22.6072 24.4269 22.7042ZM21.8356 25.3013L21.8381 25.2993C21.8351 25.3016 21.833 25.3032 21.8304 25.3053L21.8356 25.3013ZM25.0321 36.0142L22.7301 33.7089C22.7301 33.7089 22.6842 33.6671 22.6794 33.663C22.6439 33.6291 22.6133 33.5992 22.537 33.5238C22.4819 33.4704 22.4391 33.4278 22.3415 33.3302L20.2749 31.2599C20.2506 31.2347 20.2169 31.2002 20.1786 31.1616C20.1501 31.1329 20.1271 31.1099 20.0768 31.0596C20.0135 30.9963 19.9681 30.9499 19.9257 30.9049C19.7639 30.7443 19.6269 30.5928 19.4987 30.4339L19.4548 30.3846C19.4209 30.3502 19.3925 30.3108 19.3706 30.2679C19.3205 30.0915 19.3207 29.9046 19.371 29.7283C19.3929 29.6846 19.4215 29.6445 19.4557 29.6094L19.496 29.5639C19.6249 29.4046 19.7625 29.2526 19.9081 29.1086C19.9862 29.0276 20.0313 28.9811 20.0654 28.9465C20.1086 28.9036 20.1086 28.9035 20.1426 28.8694L20.1426 28.8694L20.1427 28.8693C20.197 28.8148 20.2403 28.7707 20.282 28.7273L22.3408 26.6664C22.3633 26.6439 22.3825 26.625 22.4366 26.5718C22.4834 26.5258 22.5104 26.499 22.5405 26.469C22.5869 26.4228 22.6326 26.3782 22.6774 26.3352C22.6873 26.327 22.6988 26.3163 22.7314 26.286L22.7314 26.286L25.0314 23.983C25.1672 23.8465 25.267 23.747 25.3648 23.6516C25.4588 23.5574 25.5495 23.469 25.6454 23.378C25.6667 23.3582 25.6794 23.3449 25.7381 23.2826L25.7845 23.2336C25.998 23.019 26.239 22.8433 26.5031 22.7088C26.7698 22.5743 27.0576 22.4792 27.3546 22.4277C27.6769 22.3753 28.0094 22.3462 28.3427 22.3418C28.5309 22.3373 28.6872 22.3352 28.8359 22.3352C29.006 22.3335 29.138 22.3332 29.4324 22.3332H36.1279C36.4244 22.3332 36.5556 22.3335 36.7184 22.3351C36.874 22.3352 37.0307 22.3373 37.2091 22.3416C37.5503 22.3461 37.8836 22.3752 38.2133 22.4288C38.5025 22.479 38.7894 22.574 39.0576 22.7097C39.3216 22.8433 39.5626 23.0186 39.7713 23.2288C39.9826 23.4407 40.1588 23.6831 40.2945 23.9483C40.4274 24.2132 40.5221 24.5012 40.5732 24.7984C40.6261 25.1218 40.655 25.4541 40.659 25.7872C40.6607 25.8488 40.6619 25.901 40.6629 25.9587C40.6639 26.022 40.6646 26.0724 40.6658 26.1892L40.667 26.2903L40.6669 26.8799V33.668L40.6654 33.7914C40.6632 33.9778 40.6618 34.0598 40.6589 34.1601C40.6546 34.5086 40.6253 34.8445 40.571 35.1768C40.5203 35.4722 40.4245 35.7635 40.2876 36.036C40.1526 36.2998 39.9746 36.545 39.762 36.7584C39.5506 36.9702 39.306 37.1474 39.0383 37.2829C38.7673 37.4198 38.4772 37.5157 38.1778 37.5675C37.8508 37.6211 37.5147 37.6506 37.1779 37.6548C36.968 37.6593 36.8234 37.6614 36.6805 37.6614H28.8372C28.68 37.6608 28.5179 37.6586 28.3499 37.6549C28.0108 37.6506 27.6788 37.6213 27.3504 37.5673C27.0586 37.5168 26.7708 37.4219 26.5017 37.2863C26.2403 37.1529 25.9987 36.977 25.789 36.7667C25.7764 36.7544 25.759 36.7364 25.737 36.7132L25.7343 36.7103C25.6818 36.655 25.6699 36.6425 25.6575 36.6306L25.6425 36.6165C25.5663 36.545 25.4919 36.472 25.3714 36.3515C25.2744 36.2562 25.1997 36.1818 25.0321 36.0142ZM29.8128 33.525C29.7587 33.5786 29.6939 33.6223 29.6208 33.6526C29.3974 33.7451 29.1402 33.694 28.9692 33.523C28.8566 33.4108 28.7934 33.2584 28.7934 33.0995C28.7934 32.9406 28.8566 32.7883 28.9692 32.6761V32.6774C29.0013 32.6452 29.0365 32.6173 29.074 32.5938L31.6688 29.9958L28.9692 27.2991L28.9778 27.2905C28.924 27.2364 28.8802 27.1715 28.8499 27.0982C28.7573 26.8748 28.8085 26.6176 28.9795 26.4466C29.0917 26.3336 29.2444 26.2701 29.4036 26.2701C29.5628 26.2701 29.7155 26.3336 29.8277 26.4466H29.8251C29.854 26.4756 29.8796 26.507 29.9016 26.5404L32.5132 29.1503L35.1322 26.5282C35.1524 26.4989 35.1756 26.471 35.2017 26.4449C35.3727 26.2739 35.6298 26.2227 35.8533 26.3153C36.0767 26.4078 36.2224 26.6259 36.2224 26.8677C36.2224 27.0285 36.158 27.1788 36.0491 27.2887L36.0559 27.2955L33.359 29.9956L35.9689 32.6038C36.001 32.6253 36.0311 32.65 36.0589 32.6777L36.0575 32.6791C36.2286 32.8501 36.2797 33.1072 36.1872 33.3307C36.0946 33.5541 35.8766 33.6998 35.6348 33.6998C35.4739 33.6998 35.3236 33.6354 35.2138 33.5265L35.2087 33.5316L32.5149 30.8408L29.8234 33.5356L29.8128 33.525Z" fill="#8E8E8E"/>
        </Svg>
      </TouchableOpacity>
    );
  }

  Biometrics() {
    return (
      <View style={[styles.cell, this.props.cellStyle]}>

        {Boolean(this.props.isUseBiometrics) && (
          <TouchableOpacity onPress={this.props.onPressBiometrics}>
            <Svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
              <Path d="M15.6457 22.7771V19.2114C15.6457 17.1973 17.1973 15.6457 19.2114 15.6457H22.7771C23.2316 15.6457 23.6 15.2773 23.6 14.8229C23.6 14.3684 23.2316 14 22.7771 14H19.2114C16.2884 14 14 16.2884 14 19.2114V22.7771C14 23.2316 14.3684 23.6 14.8229 23.6C15.2773 23.6 15.6457 23.2316 15.6457 22.7771Z" fill="#8E8E8E"/>
              <Path d="M44.3543 22.7771V19.2114C44.3543 17.1973 42.8027 15.6457 40.7886 15.6457H37.2229C36.7684 15.6457 36.4 15.2773 36.4 14.8229C36.4 14.3684 36.7684 14 37.2229 14H40.7886C43.7116 14 46 16.2884 46 19.2114V22.7771C46 23.2316 45.6316 23.6 45.1771 23.6C44.7227 23.6 44.3543 23.2316 44.3543 22.7771Z" fill="#8E8E8E"/>
              <Path d="M15.6457 37.2229V40.7886C15.6457 42.8027 17.1973 44.3543 19.2114 44.3543H22.7771C23.2316 44.3543 23.6 44.7227 23.6 45.1771C23.6 45.6316 23.2316 46 22.7771 46H19.2114C16.2884 46 14 43.7116 14 40.7886V37.2229C14 36.7684 14.3684 36.4 14.8229 36.4C15.2773 36.4 15.6457 36.7684 15.6457 37.2229Z" fill="#8E8E8E"/>
              <Path d="M44.3543 37.2229V40.7886C44.3543 42.8027 42.8027 44.3543 40.7886 44.3543H37.2229C36.7684 44.3543 36.4 44.7227 36.4 45.1771C36.4 45.6316 36.7684 46 37.2229 46H40.7886C43.7116 46 46 43.7116 46 40.7886V37.2229C46 36.7684 45.6316 36.4 45.1771 36.4C44.7227 36.4 44.3543 36.7684 44.3543 37.2229Z" fill="#8E8E8E"/>
              <Path d="M22.7017 26.0852V28.3722C22.7017 28.8456 23.0599 29.2293 23.5017 29.2293C23.9435 29.2293 24.3017 28.8456 24.3017 28.3722V26.0852C24.3017 25.6118 23.9435 25.228 23.5017 25.228C23.0599 25.228 22.7017 25.6118 22.7017 26.0852Z" fill="#8E8E8E"/>
              <Path d="M35.8948 26.0852V28.3722C35.8948 28.8456 36.2529 29.2293 36.6948 29.2293C37.1366 29.2293 37.4948 28.8456 37.4948 28.3722V26.0852C37.4948 25.6118 37.1366 25.228 36.6948 25.228C36.2529 25.228 35.8948 25.6118 35.8948 26.0852Z" fill="#8E8E8E"/>
              <Path d="M24.3727 37.633C25.9332 39.0895 27.8231 39.8244 30 39.8244C32.1768 39.8244 34.0667 39.0895 35.6272 37.633C35.9672 37.3157 35.9856 36.7828 35.6682 36.4428C35.3509 36.1028 34.818 36.0844 34.478 36.4018C33.2315 37.5652 31.7529 38.1402 30 38.1402C28.247 38.1402 26.7685 37.5652 25.5219 36.4018C25.1819 36.0844 24.649 36.1028 24.3317 36.4428C24.0144 36.7828 24.0327 37.3157 24.3727 37.633Z" fill="#8E8E8E"/>
              <Path d="M29.9999 26.0701V31.9649C29.9999 32.3421 29.8155 32.5263 29.4364 32.5263H28.8771C28.412 32.5263 28.035 32.9033 28.035 33.3684C28.035 33.8335 28.412 34.2105 28.8771 34.2105H29.4364C30.7452 34.2105 31.6841 33.2727 31.6841 31.9649V26.0701C31.6841 25.6051 31.3071 25.228 30.842 25.228C30.3769 25.228 29.9999 25.6051 29.9999 26.0701Z" fill="#8E8E8E"/>
            </Svg>
          </TouchableOpacity>
        )}

        {Boolean(this.props.isUseDecimal) && (
          <TouchableOpacity onPress={() => {this.onPress(','.toString())}} key={','} accessibilityLabel={','.toString()}>
            <Text style={[styles.number, { color: this.props.color }]}>,</Text>
          </TouchableOpacity>
        )}
      </View>
    );
  }

  Row(numbersArray) {
    let cells = numbersArray.map((val) => this.Cell(val));
    return (
      <View style={[styles.row, this.props.rowStyle]}>
        {cells}
      </View>
    );
  }

  Cell(symbol) {
    return (
      <TouchableOpacity style={[styles.cell, this.props.cellStyle]} key={symbol} accessibilityLabel={symbol.toString()} onPress={() => { this.onPress(symbol.toString()) }}>
        <Text style={[styles.number, { color: this.props.color }]}>{symbol}</Text>
      </TouchableOpacity>
    );
  }

  onPress(val) {
    if (this.props.pressMode === 'string') {
      let curText = this.state.text;
      if (isNaN(val)) {
        if (val === 'back') {
          curText = curText.slice(0, -1);
        } else {
          curText += val;
        }
      } else if (val === ',' && (val.indexOf(',') > -1 || val === '')) {
        curText = curText;
      } else {
        curText += val;
      }
      this.setState({ text: curText });
      this.props.onPress(curText);
    } else /* if (props.pressMode == 'char')*/ {
      this.props.onPress(val);
    }
  }
}


module.exports = VirtualKeyboard;
